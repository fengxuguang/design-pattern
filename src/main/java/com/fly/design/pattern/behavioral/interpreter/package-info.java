/**
 * 解释器模式: 通过定义一种语言文法的表示, 并提供一种解释器来解释这种语言的语句. 这样, 你可以将语句表示为抽象语法树,
 * 然后通过解释器逐步执行和解释这个语法树.
 *
 * 1. 抽象表达式 (Abstract Expression): 定义了一个抽象的解释方法, 所有的具体表达式都需要实现这个接口
 * 2. 终结符表达式 (Terminal Expression): 实现了抽象表达式接口, 用于表示语言中的终结符
 * 3. 非终结符表达式 (Non-terminal Expression): 实现了抽象表达式接口, 用于表示语言中的非终结符, 通常由多个终结符/或其他非终结符组成的组合.
 * 4. 上下文 (Context): 包含了需要被解释的信息, 通常包括输入的语句和解释器.
 * 5. 解释器 (Interpreter): 包含了解释器模式的主要逻辑, 它通过递归的方式对抽象语法树进行解释, 实现了语言中各种语句的解释和执行.
 *
 * 优点: 解释器模式的使用可以使你更容易地实现特定语言的解释和执行, 尤其在处理自定义的领域特定语言 (DSL) 时非常有用.
 *
 * 缺点: 解释器模式可能导致类的数量增加, 因为每个语法规则都需要一个相应的表达式类. 此外, 解释器模式可能会对性能产生影响, 特别是处理复杂语法时.
 *
 * Created by fengxuguang on 2024/12/24 16:07
 */
package com.fly.design.pattern.behavioral.interpreter;