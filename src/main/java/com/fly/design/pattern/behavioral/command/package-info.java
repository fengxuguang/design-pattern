/**
 * 命令模式: 提供了一种将请求封装成对象的方法, 使得请求的发送者与请求的接受者之间不直接耦合.
 *
 * 命令模式有以下几个角色:
 *   1. 命令 (Command): 抽象命令类, 定义了执行命令的接口. 它通常包含一个执行方法, 以及可能的其他方法.
 *   2. 具体命令 (Concrete Command): 实现了抽象命令类的具体子类, 将一个接收者与一个动作绑定. 它实现了执行方法, 该方法调用接收者的特定操作
 *   3. 接收者 (Receiver): 执行实际工作的类. 命令模式将命令传递给接收者, 由接收者执行实际的操作
 *   4. 调用者/请求者 (Invoker): 负责将命令传递给合适的接收者并触发命令的执行. 它并不关心具体的命令细节
 *   5. 客户端 (Client): 创建命令对象、接收者对象以及调用者对象, 并将它们组织起来以实现特定的操作流程.
 *
 *
 * 优点: 命令模式在于解耦命令的发送者和接收者, 从而支持更灵活的代码组织. 它允许你轻松地添加新的命令, 排队命令, 记录命令历史, 甚至实现撤销和重做功能.
 *
 * 缺点: 命令模式可能引入一些复杂性, 需要为每个操作创建一个具体命令类
 *
 * Created by fengxuguang on 2024/12/24 17:30
 */
package com.fly.design.pattern.behavioral.command;