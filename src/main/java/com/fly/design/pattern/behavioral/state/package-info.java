/**
 * 状态模式: 将对象的状态抽象成独立的状态类, 每个状态类都实现了一组特定状态下的操作.
 * 然后, 上下文对象 (即包含状态的对象) 维护一个指向当前状态的引用, 通过委托给当前状态的方法来执行操作.
 * 这种方式可以将不同状态下的行为逻辑分隔开来, 使得状态变化时的代码修改更加容易.
 *
 * 状态模式可以实现以下效果:
 *   1. 清晰的状态切换: 状态模式将每个状态的行为集中在各自的状态类中, 使得状态切换的逻辑变得清晰, 易于管理和修改.
 *   2. 可维护性: 将状态相关的代码分布在不同的状态类中, 使得代码更加模块化和可维护.
 *   3. 扩展性: 添加新的状态只需要创建新的状态类并实现相关操作, 不会影响到其他状态类或上下文类的代码.
 *   4. 避免条件语句: 状态模式避免了大量的条件语句, 从而提高了代码的可读性和可维护性.
 *   5. 复用性: 状态类之间的逻辑可以被复用, 因为它们是独立的实体.
 *
 * Created by fengxuguang on 2024/12/25 11:44
 */
package com.fly.design.pattern.behavioral.state;