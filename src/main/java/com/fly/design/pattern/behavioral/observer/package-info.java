/**
 * 观察者模式: 核心思想是定义一种一对多的依赖关系, 使得一个主题 (通常称为观察者) 可以同时维护多个观察者, 并在其状态改变时自动
 * 通知所有观察者. 这样, 观察者无需关心主题的内部实现细节, 而只需要关心主题的状态变化. 在实现中, 通常会定义一个抽象的主题类和
 * 一个抽象的观察者类, 具体的主题和观察者类会继承这些抽象类并实现相应的方法.
 *
 * 优点:
 *   1. 松耦合: 主题和观察者之间的耦合度降低, 使得它们可以独立地进行变化.
 *   2. 可扩展性: 可以方便地增加新的观察者, 而不会影响到已有的观察者和主题
 *   3. 自动通知: 主题状态改变时会自动通知观察者, 减少手动维护通知的工作
 *   4. 可重用性: 主题和观察者可以在不同的场景中重复使用
 *
 * 缺点:
 *   1. 可能引起性能问题: 如果观察者过多或通知机制不合理, 可能会导致性能下降
 *   2. 更新顺序问题: 观察这的更新顺序可能会影响到系统的行为, 需要特别注意
 *   3. 过度使用的风险: 并不是所有的状态变化都适合使用观察者模式, 过度使用可能导致代码复杂化.
 *
 * Created by fengxuguang on 2024/12/25 11:09
 */
package com.fly.design.pattern.behavioral.observer;