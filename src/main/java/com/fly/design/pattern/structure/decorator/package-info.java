/**
 * 装饰模式: 提供了一种在运行时动态地为对象添加新功能的方法, 通过创建一个装饰类来包装原始类.
 * 装饰类具有与原始类相同的接口, 它内部包含一个指向原始对象的引用, 并且可以根据需要包装额外的功能.
 * 这样, 你可以通过组合不同的装饰类来构建出具有不同功能的对象.
 *
 * 优点: 装饰模式避免了类爆炸问题, 你可以通过组合少量的装饰类来实现各种功能组合. 它使得功能的增加和修改更加灵活, 不会影响到其他部分的代码
 *
 * 缺点: 装饰模式可能会导致增加很多小型的类, 从而增加了代码的复杂性.
 *
 * 装饰模式中通常涉及以下角色:
 * 1. 组件 (Component): 定义了一个抽象的接口, 可以是具体对象或装饰器所共有的接口.
 * 2. 具体组件 (Concrete Component): 实现了组件接口, 是被装饰的原始对象.
 * 3. 装饰器 (Decorator): 持有一个指向组件对象的引用, 并实现了组件的接口. 它可以包含额外的功能, 也可以将请求传递给组件对象.
 * 4. 具体装饰器 (Concrete Decorator): 扩展了装饰器类, 通过添加额外的功能来装饰具体组件.
 *
 * Created by fengxuguang on 2024/12/24 11:53
 */
package com.fly.design.pattern.structure.decorator;