/**
 * 享元模式: 享元模式的解决方案是共享对象的状态, 以减少内存和资源的消耗. 它将对象分为两部分:
 * 内部状态(Intrinsic State) 和外部状态(Extrinsic State). 内部状态是对象共享的部分, 而外部状态是每个对象特有的部分.
 *
 * 享元模式通过一个享元工厂 (Flyweight Factory) 来管理和创建共享对象. 当需要一个对象时, 工厂会检查是否已经有相同内部状态的对象存在,
 * 如果存在则返回已有的对象, 否则创建一个新的对象并将其添加到内部对象池中.
 *
 * 优点: 享元模式可以显著减少内存消耗, 因为共享对象的内部状态只有一份. 这可以在需要大量相似对象的情况下节省内存. 同时, 由于共享对象已经
 *      存在与池中, 创建时间和性能开销也会降低.
 *
 * 缺点: 享元模式引入了内部状态和外部状态的区分, 这可能增加了系统的复杂性. 此外, 对内部状态的共享需要考虑线程安全性
 *
 * 限制: 享元模式适用于对象的内部状态相对稳定, 而外部状态会变化的情况. 如果一个对象的状态完全相同, 那么不需要使用享元模式.
 *
 * Created by fengxuguang on 2024/12/24 14:50
 */
package com.fly.design.pattern.structure.flyweight;