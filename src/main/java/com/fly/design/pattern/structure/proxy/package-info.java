/**
 * 代理模式: 提供一个代理对象, 它充当了原始对象的替代品, 以控制对原始对象的访问.
 * 代理对象与原始对象实现相同的接口, 使得客户端可以无缝地切换和使用. 代理对象可以对客户端的请求进行拦截、修改或增强, 然后将请求传递给原始对象.
 *
 * 代理模式的应用场景:
 *   1. 远程代理 (Remote Proxy): 代理对象可以隐藏原始对象存在于远程服务器上的事实, 使得客户端可以透明地访问远程对象. 这在分布式系统中非常有用.
 *   2. 虚拟代理 (Virtual Proxy): 当创建原始对象需要大量资源时, 代理对象可以充当一个轻量级的替代品, 延迟原始对象的实际创建和初始化, 从而提高性能.
 *   3. 保护代理 (Protection Proxy): 代理对象可以控制对原始对象的访问权限, 确保只有具有特定权限的客户端可以访问原始对象.
 *   4. 缓存代理 (Cache Proxy): 代理对象可以缓存原始对象的结果, 以便在后续相同请求时能够直接返回缓存的结果, 减少重复计算.
 *   5. 日志记录代理 (Logging Proxy): 代理对象可以在访问原始对象之前或之后记录日志, 用于调试、监控或审计.
 *
 * Created by fengxuguang on 2024/12/24 15:43
 */
package com.fly.design.pattern.structure.proxy;